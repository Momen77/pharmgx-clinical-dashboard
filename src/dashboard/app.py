...\n147|         try:\n148|             from utils.background_worker import EnhancedBackgroundWorker as _PW\n149|             # Wrap the old worker to handle new parameters\n150|             import inspect\n151|             import threading\n152|             import queue as _queue_module\n153|             \n154|             class WorkerAdapter(threading.Thread):\n155|                 """Adapter to make old worker work with new interface"""\n156|                 def __init__(self, genes, patient_profile=None, profile=None, config_path="config.yaml", \n157|                              event_queue=None, result_queue=None, cancel_event=None, demo_mode=False):\n158|                     super().__init__(daemon=True)\n159|                     self.genes = genes\n160|                     self.profile = patient_profile if patient_profile is not None else profile\n161|                     self.event_queue = event_queue or _queue_module.Queue()\n162|                     self.result_queue = result_queue or _queue_module.Queue()\n163|                     self.cancel_event = cancel_event or threading.Event()\n164|                     self.demo_mode = demo_mode\n165|                     self.result = None\n166|                     self.error = None\n167|                     self.is_complete = False\n168|                     \n169|                     # Check what parameters the old worker accepts\n170|                     try:\n171|                         sig = inspect.signature(_PW.__init__)\n172|                         self.old_worker_params = set(sig.parameters.keys())\n173|                     except:\n174|                         self.old_worker_params = {'genes', 'patient_profile'}\n175|                 \n176|                 def run(self):\n177|                     try:\n178|                         # Create worker with only the parameters it accepts\n179|                         worker_kwargs = {}\n180|                         if 'patient_profile' in self.old_worker_params:\n181|                             worker_kwargs['patient_profile'] = self.profile\n182|                         elif 'profile' in self.old_worker_params:\n183|                             worker_kwargs['profile'] = self.profile\n184|                         \n185|                         worker = _PW(self.genes, **worker_kwargs)\n186|                         \n187|                         # Handle demo mode manually\n188|                         if self.demo_mode:\n189|                             import time\n190|                             from utils.event_bus import PipelineEvent\n191|                             stages = [\n192|                                 ("lab_prep", "DNA extraction & QC", 0.15),\n193|                                 ("ngs", "Sequencing & variant calling", 0.45),\n194|                                 ("annotation", "Clinical annotation & literature", 0.7),\n195|                                 ("enrichment", "Drug interactions & guidelines", 0.9),\n196|                             ]\n197|                             for s, msg, p in stages:\n198|                                 if self.cancel_event.is_set():\n199|                                     break\n200|                                 self.event_queue.put(PipelineEvent(s, "processing", msg, p))\n201|                                 time.sleep(0.6)\n202|                             \n203|                             self.result = {\n204|                                 "success": True,\n205|                                 "genes": list(self.genes),\n206|                                 "patient_id": "DEMO",\n207|                                 "total_variants": 12,\n208|                                 "affected_drugs": 2,\n209|                                 "comprehensive_profile": {"patient_id": "DEMO", "dashboard_source": True},\n210|                                 "comprehensive_outputs": {"Comprehensive JSON-LD": "output/demo/DEMO_demo.jsonld"}\n211|                             }\n212|                         else:\n213|                             # Run the old worker\n214|                             worker.start()\n215|                             worker.join()\n216|                             self.result = worker.get_result() if hasattr(worker, 'get_result') else worker.result\n217|                         \n218|                         if self.result:\n219|                             self.result_queue.put(self.result)\n220|                     except Exception as e:\n221|                         self.error = e\n222|                         self.result_queue.put({"success": False, "error": str(e)})\n223|                     finally:\n224|                         self.is_complete = True\n225|                 \n226|                 def is_alive(self):\n227|                     return super().is_alive() and not self.is_complete\n228|             \n229|             PipelineWorker = WorkerAdapter\n230|             _worker_source = "EnhancedBackgroundWorker (adapted)"\n231|         except Exception as e3:\n232|             PipelineWorker = None\n233|             _worker_source = f"none (errors: {e1}, {e2}, {e3})"\n...\n248|         try:\n249|             from components.jsonld_visualizer import (\n250|                 jsonld_to_hierarchy,\n251|                 render_d3_visualization,\n252|                 get_node_details,\n253|             )\n254|         except Exception:\n255|             jsonld_to_hierarchy = None\n256|             render_d3_visualization = None\n257|             get_node_details = None\n...\n377|             st.info(f"Selected: {', '.join(st.session_state.get('selected_genes', [])) or 'None'}")\n...\n698|                     st.text(f"{t}: {p}")\n...\n870|                             if path and _P(path).exists():\n871|                                 try:\n872|                                     with open(path, 'rb') as f:\n873|                                         file_content = f.read()\n874|                                         st.download_button(\n875|                                             f"üìÑ {key}",\n876|                                             file_content,\n877|                                             file_name=_P(path).name,\n878|                                             key=f"download_{key}",\n879|                                             use_container_width=False\n880|                                         )\n881|                                 except Exception as e:\n882|                                     st.error(f"Error reading {key}: {e}")\n883|                             else:\n884|                                 st.caption(f"‚ö†Ô∏è {key} - File not found")\n...\n889|                 for t, p in outputs.items():\n890|                     exists = _P(p).exists() if p else False\n891|                     status = "‚úÖ" if exists else "‚ùå"\n892|                     st.text(f"{status} {t}")\n893|                     st.code(p or 'No path', language=None)\n...